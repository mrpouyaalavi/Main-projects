{"ast":null,"code":"'use strict';\n\nvar _classCallCheck = require(\"@babel/runtime/helpers/classCallCheck\");\nvar _createClass = require(\"@babel/runtime/helpers/createClass\");\nvar invariant = require('invariant');\nvar EventSubscriptionVendor = function () {\n  function EventSubscriptionVendor() {\n    _classCallCheck(this, EventSubscriptionVendor);\n    this._subscriptionsForType = {};\n  }\n  _createClass(EventSubscriptionVendor, [{\n    key: \"addSubscription\",\n    value: function addSubscription(eventType, subscription) {\n      invariant(subscription.subscriber === this, 'The subscriber of the subscription is incorrectly set.');\n      if (!this._subscriptionsForType[eventType]) {\n        this._subscriptionsForType[eventType] = [];\n      }\n      var key = this._subscriptionsForType[eventType].length;\n      this._subscriptionsForType[eventType].push(subscription);\n      subscription.eventType = eventType;\n      subscription.key = key;\n      return subscription;\n    }\n  }, {\n    key: \"removeAllSubscriptions\",\n    value: function removeAllSubscriptions(eventType) {\n      if (eventType == null) {\n        this._subscriptionsForType = {};\n      } else {\n        delete this._subscriptionsForType[eventType];\n      }\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      var eventType = subscription.eventType;\n      var key = subscription.key;\n      var subscriptionsForType = this._subscriptionsForType[eventType];\n      if (subscriptionsForType) {\n        delete subscriptionsForType[key];\n      }\n    }\n  }, {\n    key: \"getSubscriptionsForType\",\n    value: function getSubscriptionsForType(eventType) {\n      return this._subscriptionsForType[eventType];\n    }\n  }]);\n  return EventSubscriptionVendor;\n}();\nmodule.exports = EventSubscriptionVendor;","map":{"version":3,"names":["_classCallCheck","require","_createClass","invariant","EventSubscriptionVendor","_subscriptionsForType","key","value","addSubscription","eventType","subscription","subscriber","length","push","removeAllSubscriptions","removeSubscription","subscriptionsForType","getSubscriptionsForType","module","exports"],"sources":["/Users/pouya/Documents/RoiFrontend-start-of-video-tutorial/node_modules/react-native/Libraries/vendor/emitter/_EventSubscriptionVendor.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n */\n\n'use strict';\n\nconst invariant = require('invariant');\n\nimport type EventSubscription from './_EventSubscription';\n\n/**\n * EventSubscriptionVendor stores a set of EventSubscriptions that are\n * subscribed to a particular event type.\n */\nclass EventSubscriptionVendor<EventDefinitions: {...}> {\n  _subscriptionsForType: {\n    [type: $Keys<EventDefinitions>]: Array<\n      EventSubscription<EventDefinitions, $FlowFixMe>,\n    >,\n    ...\n  };\n\n  constructor() {\n    this._subscriptionsForType = {};\n  }\n\n  /**\n   * Adds a subscription keyed by an event type.\n   *\n   * @param {string} eventType\n   * @param {EventSubscription} subscription\n   */\n  addSubscription<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    subscription: EventSubscription<EventDefinitions, K>,\n  ): EventSubscription<EventDefinitions, K> {\n    invariant(\n      subscription.subscriber === this,\n      'The subscriber of the subscription is incorrectly set.',\n    );\n    if (!this._subscriptionsForType[eventType]) {\n      this._subscriptionsForType[eventType] = [];\n    }\n    const key = this._subscriptionsForType[eventType].length;\n    this._subscriptionsForType[eventType].push(subscription);\n    subscription.eventType = eventType;\n    subscription.key = key;\n    return subscription;\n  }\n\n  /**\n   * Removes a bulk set of the subscriptions.\n   *\n   * @param {?string} eventType - Optional name of the event type whose\n   *   registered subscriptions to remove, if null remove all subscriptions.\n   */\n  removeAllSubscriptions<K: $Keys<EventDefinitions>>(eventType: ?K): void {\n    if (eventType == null) {\n      this._subscriptionsForType = {};\n    } else {\n      delete this._subscriptionsForType[eventType];\n    }\n  }\n\n  /**\n   * Removes a specific subscription. Instead of calling this function, call\n   * `subscription.remove()` directly.\n   *\n   * @param {object} subscription\n   */\n  removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EventSubscription<EventDefinitions, K>,\n  ): void {\n    const eventType = subscription.eventType;\n    const key = subscription.key;\n\n    const subscriptionsForType = this._subscriptionsForType[eventType];\n    if (subscriptionsForType) {\n      delete subscriptionsForType[key];\n    }\n  }\n\n  /**\n   * Returns the array of subscriptions that are currently registered for the\n   * given event type.\n   *\n   * Note: This array can be potentially sparse as subscriptions are deleted\n   * from it when they are removed.\n   *\n   * TODO: This returns a nullable array. wat?\n   *\n   * @param {string} eventType\n   * @returns {?array}\n   */\n  getSubscriptionsForType<K: $Keys<EventDefinitions>>(\n    eventType: K,\n  ): ?Array<EventSubscription<EventDefinitions, K>> {\n    return this._subscriptionsForType[eventType];\n  }\n}\n\nmodule.exports = EventSubscriptionVendor;\n"],"mappings":"AAUA,YAAY;;AAAC,IAAAA,eAAA,GAAAC,OAAA;AAAA,IAAAC,YAAA,GAAAD,OAAA;AAEb,IAAME,SAAS,GAAGF,OAAO,CAAC,WAAW,CAAC;AAAC,IAQjCG,uBAAuB;EAQ3B,SAAAA,wBAAA,EAAc;IAAAJ,eAAA,OAAAI,uBAAA;IACZ,IAAI,CAACC,qBAAqB,GAAG,CAAC,CAAC;EACjC;EAACH,YAAA,CAAAE,uBAAA;IAAAE,GAAA;IAAAC,KAAA,EAQD,SAAAC,gBACEC,SAAY,EACZC,YAAoD,EACZ;MACxCP,SAAS,CACPO,YAAY,CAACC,UAAU,KAAK,IAAI,EAChC,wDACF,CAAC;MACD,IAAI,CAAC,IAAI,CAACN,qBAAqB,CAACI,SAAS,CAAC,EAAE;QAC1C,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC,GAAG,EAAE;MAC5C;MACA,IAAMH,GAAG,GAAG,IAAI,CAACD,qBAAqB,CAACI,SAAS,CAAC,CAACG,MAAM;MACxD,IAAI,CAACP,qBAAqB,CAACI,SAAS,CAAC,CAACI,IAAI,CAACH,YAAY,CAAC;MACxDA,YAAY,CAACD,SAAS,GAAGA,SAAS;MAClCC,YAAY,CAACJ,GAAG,GAAGA,GAAG;MACtB,OAAOI,YAAY;IACrB;EAAC;IAAAJ,GAAA;IAAAC,KAAA,EAQD,SAAAO,uBAAmDL,SAAa,EAAQ;MACtE,IAAIA,SAAS,IAAI,IAAI,EAAE;QACrB,IAAI,CAACJ,qBAAqB,GAAG,CAAC,CAAC;MACjC,CAAC,MAAM;QACL,OAAO,IAAI,CAACA,qBAAqB,CAACI,SAAS,CAAC;MAC9C;IACF;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAQD,SAAAQ,mBACEL,YAAoD,EAC9C;MACN,IAAMD,SAAS,GAAGC,YAAY,CAACD,SAAS;MACxC,IAAMH,GAAG,GAAGI,YAAY,CAACJ,GAAG;MAE5B,IAAMU,oBAAoB,GAAG,IAAI,CAACX,qBAAqB,CAACI,SAAS,CAAC;MAClE,IAAIO,oBAAoB,EAAE;QACxB,OAAOA,oBAAoB,CAACV,GAAG,CAAC;MAClC;IACF;EAAC;IAAAA,GAAA;IAAAC,KAAA,EAcD,SAAAU,wBACER,SAAY,EACoC;MAChD,OAAO,IAAI,CAACJ,qBAAqB,CAACI,SAAS,CAAC;IAC9C;EAAC;EAAA,OAAAL,uBAAA;AAAA;AAGHc,MAAM,CAACC,OAAO,GAAGf,uBAAuB"},"metadata":{},"sourceType":"script","externalDependencies":[]}