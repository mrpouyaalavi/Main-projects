{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nvar invariant = require('invariant');\nimport EmitterSubscription from \"./_EmitterSubscription\";\nimport EventSubscriptionVendor from \"./_EventSubscriptionVendor\";\nvar sparseFilterPredicate = function sparseFilterPredicate() {\n  return true;\n};\nvar EventEmitter = function () {\n  function EventEmitter(subscriber) {\n    _classCallCheck(this, EventEmitter);\n    this._subscriber = new EventSubscriptionVendor();\n    if (subscriber != null) {\n      console.warn('EventEmitter(...): Constructor argument is deprecated.');\n      this._subscriber = subscriber;\n    }\n  }\n  _createClass(EventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      return this._subscriber.addSubscription(eventType, new EmitterSubscription(this, this._subscriber, listener, context));\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      this._subscriber.removeAllSubscriptions(eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      console.warn('EventEmitter.removeSubscription(...): Method has been deprecated. ' + 'Please instead use `remove()` on the subscription itself.');\n      this.__removeSubscription(subscription);\n    }\n  }, {\n    key: \"__removeSubscription\",\n    value: function __removeSubscription(subscription) {\n      invariant(subscription.emitter === this, 'Subscription does not belong to this emitter.');\n      this._subscriber.removeSubscription(subscription);\n    }\n  }, {\n    key: \"listenerCount\",\n    value: function listenerCount(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      return subscriptions ? subscriptions.filter(sparseFilterPredicate).length : 0;\n    }\n  }, {\n    key: \"emit\",\n    value: function emit(eventType) {\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n          args[_key - 1] = arguments[_key];\n        }\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener) {\n            subscription.listener.apply(subscription.context, args);\n          }\n        }\n      }\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(eventType, listener) {\n      console.warn(\"EventEmitter.removeListener('\" + eventType + \"', ...): Method has been \" + 'deprecated. Please instead use `remove()` on the subscription ' + 'returned by `EventEmitter.addListener`.');\n      var subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n      if (subscriptions) {\n        for (var i = 0, l = subscriptions.length; i < l; i++) {\n          var subscription = subscriptions[i];\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n          }\n        }\n      }\n    }\n  }]);\n  return EventEmitter;\n}();\nmodule.exports = EventEmitter;","map":{"version":3,"names":["invariant","require","EmitterSubscription","EventSubscriptionVendor","sparseFilterPredicate","EventEmitter","subscriber","_classCallCheck","_subscriber","console","warn","_createClass","key","value","addListener","eventType","listener","context","addSubscription","removeAllListeners","removeAllSubscriptions","removeSubscription","subscription","__removeSubscription","emitter","listenerCount","subscriptions","getSubscriptionsForType","filter","length","emit","_len","arguments","args","Array","_key","i","l","apply","removeListener","remove","module","exports"],"sources":["/Users/pouya/Documents/RoiFrontend-start-of-video-tutorial/node_modules/react-native/Libraries/vendor/emitter/_EventEmitter.js"],"sourcesContent":["/**\n * Copyright (c) Meta Platforms, Inc. and affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow strict\n * @typecheck\n */\n\nconst invariant = require('invariant');\n\nimport EmitterSubscription from './_EmitterSubscription';\nimport {type EventSubscription} from './EventSubscription';\nimport EventSubscriptionVendor from './_EventSubscriptionVendor';\n\nconst sparseFilterPredicate = () => true;\n\n/**\n * @class EventEmitter\n * @description\n * An EventEmitter is responsible for managing a set of listeners and publishing\n * events to them when it is told that such events happened. In addition to the\n * data for the given event it also sends a event control object which allows\n * the listeners/handlers to prevent the default behavior of the given event.\n *\n * The emitter is designed to be generic enough to support all the different\n * contexts in which one might want to emit events. It is a simple multicast\n * mechanism on top of which extra functionality can be composed. For example, a\n * more advanced emitter may use an EventHolder and EventFactory.\n */\nclass EventEmitter<EventDefinitions: {...}> {\n  _subscriber: EventSubscriptionVendor<EventDefinitions> =\n    new EventSubscriptionVendor<EventDefinitions>();\n\n  /**\n   * @constructor\n   */\n  constructor(subscriber: ?EventSubscriptionVendor<EventDefinitions>) {\n    if (subscriber != null) {\n      console.warn('EventEmitter(...): Constructor argument is deprecated.');\n      this._subscriber = subscriber;\n    }\n  }\n\n  /**\n   * Adds a listener to be invoked when events of the specified type are\n   * emitted. An optional calling context may be provided. The data arguments\n   * emitted will be passed to the listener function.\n   *\n   * @param {string} eventType - Name of the event to listen to\n   * @param {function} listener - Function to invoke when the specified event is\n   *   emitted\n   * @param {*} context - Optional context object to use when invoking the\n   *   listener\n   */\n  addListener<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    // FIXME: listeners should return void instead of mixed to prevent issues\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n    context: $FlowFixMe,\n  ): EventSubscription {\n    return (this._subscriber.addSubscription(\n      eventType,\n      new EmitterSubscription(this, this._subscriber, listener, context),\n    ): $FlowFixMe);\n  }\n\n  /**\n   * Removes all of the registered listeners, including those registered as\n   * listener maps.\n   *\n   * @param {?string} eventType - Optional name of the event whose registered\n   *   listeners to remove\n   */\n  removeAllListeners<K: $Keys<EventDefinitions>>(eventType: ?K): void {\n    this._subscriber.removeAllSubscriptions(eventType);\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EmitterSubscription<EventDefinitions, K>,\n  ): void {\n    console.warn(\n      'EventEmitter.removeSubscription(...): Method has been deprecated. ' +\n        'Please instead use `remove()` on the subscription itself.',\n    );\n    this.__removeSubscription(subscription);\n  }\n\n  /**\n   * Called by `EmitterSubscription` to bypass the above deprecation warning.\n   */\n  __removeSubscription<K: $Keys<EventDefinitions>>(\n    subscription: EmitterSubscription<EventDefinitions, K>,\n  ): void {\n    invariant(\n      subscription.emitter === this,\n      'Subscription does not belong to this emitter.',\n    );\n    this._subscriber.removeSubscription(subscription);\n  }\n\n  /**\n   * Returns the number of listeners that are currently registered for the given\n   * event.\n   *\n   * @param {string} eventType - Name of the event to query\n   * @returns {number}\n   */\n  listenerCount<K: $Keys<EventDefinitions>>(eventType: K): number {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    return subscriptions\n      ? // We filter out missing entries because the array is sparse.\n        // \"callbackfn is called only for elements of the array which actually\n        // exist; it is not called for missing elements of the array.\"\n        // https://www.ecma-international.org/ecma-262/9.0/index.html#sec-array.prototype.filter\n        subscriptions.filter(sparseFilterPredicate).length\n      : 0;\n  }\n\n  /**\n   * Emits an event of the given type with the given data. All handlers of that\n   * particular type will be notified.\n   *\n   * @param {string} eventType - Name of the event to emit\n   * @param {...*} Arbitrary arguments to be passed to each registered listener\n   *\n   * @example\n   *   emitter.addListener('someEvent', function(message) {\n   *     console.log(message);\n   *   });\n   *\n   *   emitter.emit('someEvent', 'abc'); // logs 'abc'\n   */\n  emit<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    ...args: $ElementType<EventDefinitions, K>\n  ): void {\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        if (subscription && subscription.listener) {\n          subscription.listener.apply(subscription.context, args);\n        }\n      }\n    }\n  }\n\n  /**\n   * @deprecated Use `remove` on the EventSubscription from `addListener`.\n   */\n  removeListener<K: $Keys<EventDefinitions>>(\n    eventType: K,\n    // FIXME: listeners should return void instead of mixed to prevent issues\n    listener: (...$ElementType<EventDefinitions, K>) => mixed,\n  ): void {\n    console.warn(\n      `EventEmitter.removeListener('${eventType}', ...): Method has been ` +\n        'deprecated. Please instead use `remove()` on the subscription ' +\n        'returned by `EventEmitter.addListener`.',\n    );\n    const subscriptions = this._subscriber.getSubscriptionsForType(eventType);\n    if (subscriptions) {\n      for (let i = 0, l = subscriptions.length; i < l; i++) {\n        const subscription = subscriptions[i];\n\n        // The subscription may have been removed during this event loop.\n        // its listener matches the listener in method parameters\n        if (subscription && subscription.listener === listener) {\n          subscription.remove();\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = EventEmitter;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}