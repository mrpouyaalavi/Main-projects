{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport { SafeAreaView } from \"react-native-safe-area-context\";\nimport Settings from \"../constants/Settings\";\nimport { RoiDeletePerson, RoiGetPeople } from \"../utils/Api\";\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from \"../components/MyButton\";\nimport { error } from 'webpack-dev-server/lib/utils/colors';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function ViewPeopleScreen(props) {\n  var _React$useState = React.useState([]),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    people = _React$useState2[0],\n    setPeople = _React$useState2[1];\n  React.useEffect(refreshPersonList, []);\n  function refreshPersonList() {\n    console.log(\"refresh person list\");\n    RoiGetPeople().then(function (data) {\n      setPeople(data);\n    }).catch(function (error) {\n      PopupOk(\"API Error\", \"Could not get people from the server\");\n    });\n  }\n  function showAddPerson() {\n    console.log(\"show add person...\");\n  }\n  function deleteperson(person) {\n    PopupOkCancel(\"Delete person?\", \"Are you sure you want to delete this \" + person.name + \"?\", function () {\n      RoiDeletePerson(person.id).then(function (data) {\n        PopupOk(\"Person deleted\", person.name + \" has been deleted.\");\n        refreshPersonList();\n      }).catch(function (error) {});\n      PopupOk(\"Error\", error);\n    }, function () {});\n  }\n  function displayPeople() {\n    return people.map(function (p) {\n      return _jsxs(View, {\n        style: Styles.personListItem,\n        children: [_jsxs(View, {\n          style: Styles.personListItemDetails,\n          children: [_jsx(TextParagraph, {\n            style: Styles.personListItemName,\n            children: p.name\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.department ? p.department.name : \"---\"\n          }), _jsx(TextParagraph, {\n            style: Styles.personListItemText,\n            children: p.phone\n          })]\n        }), _jsxs(View, {\n          style: Styles.personListItemButtons,\n          children: [_jsx(MyButton, {\n            text: \"Info\",\n            type: \"major\",\n            size: \"small\",\n            buttonstyle: Styles.personListItemButton,\n            textstyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Edit\",\n            type: \"default\",\n            size: \"small\",\n            buttonstyle: Styles.personListItemButton,\n            textstyle: Styles.personListItemButtonText\n          }), _jsx(MyButton, {\n            text: \"Delete\",\n            type: \"minor\",\n            size: \"small\",\n            onPress: function onPress() {\n              deleteperson(p);\n            },\n            buttonstyle: Styles.personListItemButton,\n            textstyle: Styles.personListItemButtonText\n          })]\n        })]\n      }, p.id);\n    });\n  }\n  return _jsxs(SafeAreaView, {\n    style: Styles.safeAreaView,\n    children: [_jsxs(View, {\n      style: Styles.personButtonContainer,\n      children: [_jsx(MyButton, {\n        text: \"+ Add new person\",\n        type: \"major\",\n        size: \"small\",\n        onPress: showAddPerson\n      }), _jsx(MyButton, {\n        text: \"Refresh\",\n        type: \"default\",\n        size: \"small\",\n        onPress: refreshPersonList\n      })]\n    }), _jsxs(ScrollView, {\n      style: Styles.container,\n      contentContainerStyle: Styles.contentContainer,\n      children: [_jsx(TextH1, {\n        style: {\n          marginTop: 0\n        },\n        children: \"Listing all people\"\n      }), _jsx(View, {\n        style: Styles.personList,\n        children: displayPeople()\n      })]\n    })]\n  });\n}","map":{"version":3,"names":["React","View","ScrollView","SafeAreaView","Settings","RoiDeletePerson","RoiGetPeople","PopupOk","PopupOkCancel","TextParagraph","TextH1","TextH2","Styles","MyButton","error","jsx","_jsx","jsxs","_jsxs","ViewPeopleScreen","props","_React$useState","useState","_React$useState2","_slicedToArray","people","setPeople","useEffect","refreshPersonList","console","log","then","data","catch","showAddPerson","deleteperson","person","name","id","displayPeople","map","p","style","personListItem","children","personListItemDetails","personListItemName","personListItemText","department","phone","personListItemButtons","text","type","size","buttonstyle","personListItemButton","textstyle","personListItemButtonText","onPress","safeAreaView","personButtonContainer","container","contentContainerStyle","contentContainer","marginTop","personList"],"sources":["/Users/pouya/Documents/RoiFrontend-start-of-video-tutorial/screens/ViewPeopleScreen.js"],"sourcesContent":["import * as React from 'react';\nimport { View, ScrollView } from 'react-native';\nimport { SafeAreaView } from \"react-native-safe-area-context\";\n\n// Import helper code\nimport Settings from '../constants/Settings';\nimport { RoiDeletePerson, RoiGetPeople } from '../utils/Api';\nimport { PopupOk, PopupOkCancel } from \"../utils/Popup\";\n\n// Import styling and components\nimport { TextParagraph, TextH1, TextH2 } from \"../components/StyledText\";\nimport Styles from \"../styles/MainStyle\";\nimport { MyButton } from '../components/MyButton';\nimport { error } from 'webpack-dev-server/lib/utils/colors';\n\n\nexport default function ViewPeopleScreen(props) {\n\n  // State - data for this component\n\n  // Data array, default to empty array\n  const [people, setPeople] = React.useState([])\n\n  // Set \"effect\" to retrieve and store data - only run on mount/unmount (loaded/unloaded)\n  // \"effectful\" code is something that triggers a UI re-render\n  React.useEffect(refreshPersonList, [])\n\n  // Refresh the person list data - call the API\n  function refreshPersonList() {\n\n    console.log(\"refresh person list\")\n\n    // Get data from the API\n    RoiGetPeople()\n      // Success\n      .then(data => {\n        // Store results in state variable\n        setPeople(data)\n      })\n      // Error\n      .catch(error => {\n        PopupOk(\"API Error\", \"Could not get people from the server\")\n      })\n\n  }\n\n  function showAddPerson() {\n    \n    console.log(\"show add person...\")\n\n  }\n\n//Delete Person\n/** \n* Delete a person from the database.\n* @param {Person} person The person to delete.\n*/\n  function deleteperson(person){\n  // check if person Should be deleted (confirm the user)\n  PopupOkCancel(\n    //Title and message\n    \"Delete person?\", \n  `Are you sure you want to delete this ${person.name}?`,\n   // ok - delete the person\n()=> {\n\n   //Delete the person using the API\nRoiDeletePerson(person.id)\n.then(data => {\n\n\n    // Show confirmation person has been deleted\n    PopupOk(\"Person deleted\", `${person.name} has been deleted.`)\n\n    // Refresh the person list\nrefreshPersonList()\n  })\n    .catch(error => {})\n    \n    //Display error to user\n    PopupOk(\"Error\", error)\n\n\n\n},\n  // cancel - do nothing\n  ()=> {\n\n  },\n)\n  }\n\n\n\n\n  // Display all people data\n  function displayPeople() {\n    \n    // Loop through each item and turn into appropriate output and then return the result\n    return people.map(p => {\n\n      // Create an output view for each item\n      return (\n        <View key={p.id} style={Styles.personListItem}>\n          <View style={Styles.personListItemDetails}>\n          <TextParagraph style={Styles.personListItemName}>{p.name}</TextParagraph>\n          <TextParagraph style={Styles.personListItemText}>{p.department ? p.department.name :\"---\"}</TextParagraph>\n          <TextParagraph style={Styles.personListItemText}>{p.phone}</TextParagraph>\n          </View>\n          <View style={Styles.personListItemButtons}>\n          <MyButton \n          text=\"Info\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          //onPress={showAddPerson}\n          buttonstyle={Styles.personListItemButton}\n          textstyle={Styles.personListItemButtonText}\n          />\n          <MyButton \n          text=\"Edit\"\n          type=\"default\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          //onPress={showAddPerson}\n          buttonstyle={Styles.personListItemButton}\n          textstyle={Styles.personListItemButtonText}\n        />\n        <MyButton \n          text=\"Delete\"\n          type=\"minor\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={()=> {deleteperson(p)}}\n          buttonstyle={Styles.personListItemButton}\n          textstyle={Styles.personListItemButtonText}\n        />\n\n          </View>\n        </View>\n      )\n\n    })\n    \n  }\n\n\n  // Main output of the screen component\n  return (\n    <SafeAreaView style={Styles.safeAreaView}>\n      \n      <View style={Styles.personButtonContainer}>\n        <MyButton \n          text=\"+ Add new person\"\n          type=\"major\"      // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={showAddPerson}\n        />\n        <MyButton \n          text=\"Refresh\"\n          type=\"default\"    // default*|major|minor\n          size=\"small\"      // small|medium*|large\n          onPress={refreshPersonList}\n        />\n      </View>\n      \n      <ScrollView style={Styles.container} contentContainerStyle={Styles.contentContainer}>\n          \n        <TextH1 style={{marginTop:0}}>Listing all people</TextH1>\n\n        <View style={Styles.personList}>\n          {displayPeople()}\n        </View>\n\n      </ScrollView>\n    </SafeAreaView>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}